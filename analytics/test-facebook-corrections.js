/**
 * Teste das corre√ß√µes implementadas no Facebook Integration
 * 
 * Este arquivo testa:
 * 1. Formata√ß√£o correta do par√¢metro FBC (timestamp em segundos)
 * 2. Valida√ß√£o robusta do token do Facebook
 * 3. Logs melhorados para eventos Purchase
 * 4. Nova fun√ß√£o sendPurchaseEvent
 * 
 * @author Sistema de Analytics Funil Spy
 * @version 1.0.0 - Teste das Corre√ß√µes
 */

require('dotenv').config();
const FacebookIntegration = require('./services/facebook-integration');

// Fun√ß√£o para testar formata√ß√£o do FBC
function testFbcFormatting() {
    console.log('\nüß™ === TESTE: FORMATA√á√ÉO FBC ===');
    
    const fb = new FacebookIntegration();
    const fbclid = 'IwAR1234567890abcdef';
    const domain = 'example.com';
    
    const fbc = fb.formatFbcParameter(fbclid, domain);
    
    console.log(`üìù FBCLID original: ${fbclid}`);
    console.log(`üåê Dom√≠nio: ${domain}`);
    console.log(`üîó FBC formatado: ${fbc}`);
    
    // Verificar se o timestamp est√° em segundos (10 d√≠gitos)
    if (fbc) {
        const parts = fbc.split('.');
        const timestamp = parts[2];
        
        if (timestamp && timestamp.length === 10) {
            console.log('‚úÖ Timestamp em segundos (correto)');
            console.log(`‚è∞ Timestamp: ${timestamp} (${new Date(parseInt(timestamp) * 1000).toISOString()})`);
        } else {
            console.log('‚ùå Timestamp n√£o est√° em segundos');
        }
    }
    
    console.log('===============================\n');
}

// Fun√ß√£o para testar valida√ß√£o do token
async function testTokenValidation() {
    console.log('üß™ === TESTE: VALIDA√á√ÉO DO TOKEN ===');
    
    const fb = new FacebookIntegration();
    
    console.log('üîç Testando valida√ß√£o do token...');
    const isValid = await fb.validateAccessToken();
    
    if (isValid) {
        console.log('‚úÖ Token validado com sucesso');
    } else {
        console.log('‚ùå Token inv√°lido ou n√£o configurado');
    }
    
    console.log('==================================\n');
}

// Fun√ß√£o para testar evento Purchase
async function testPurchaseEvent() {
    console.log('üß™ === TESTE: EVENTO PURCHASE ===');
    
    const fb = new FacebookIntegration();
    
    // Dados de teste para Purchase
    const purchaseData = {
        sessionId: 'test_session_' + Date.now(),
        transactionId: 'TEST_ORDER_' + Date.now(),
        value: 99.90,
        pageUrl: 'https://test.com/checkout/success',
        customerData: {
            email: 'test@example.com',
            phone: '+5511999999999',
            name: 'Jo√£o Silva',
            city: 'S√£o Paulo',
            state: 'SP',
            country: 'BR'
        },
        productData: {
            id: 'PROD_001',
            name: 'Produto Teste',
            category: 'Categoria Teste',
            price: 99.90
        },
        utmData: {
            fbclid: 'IwAR1234567890abcdef',
            utm_source: 'facebook',
            utm_medium: 'cpc',
            utm_campaign: 'test_campaign',
            utm_content: 'test_ad'
        },
        clientData: {
            ip: '192.168.1.1',
            userAgent: 'Mozilla/5.0 (Test Browser)'
        },
        domain: 'test.com'
    };
    
    console.log('üìù Dados do teste:');
    console.log(`üßæ Transaction ID: ${purchaseData.transactionId}`);
    console.log(`üíµ Valor: R$ ${purchaseData.value}`);
    console.log(`üìß Email: ${purchaseData.customerData.email}`);
    console.log(`üîó FBCLID: ${purchaseData.utmData.fbclid}`);
    
    try {
        // Testar nova fun√ß√£o sendPurchaseEvent
        console.log('\nüöÄ Testando nova fun√ß√£o sendPurchaseEvent...');
        const result = await fb.sendPurchaseEvent(purchaseData);
        
        if (result.success) {
            console.log('\nüéâ Teste do Purchase conclu√≠do com SUCESSO!');
            console.log(`üÜî Event ID: ${result.eventId}`);
            console.log(`üîó Facebook Trace ID: ${result.facebookEventId}`);
            console.log(`üìä FBC enviado: ${result.fbcSent ? 'Sim' : 'N√£o'}`);
        } else {
            console.log('\n‚ö†Ô∏è Teste do Purchase falhou:');
            console.log(`‚ùå Erro: ${result.error}`);
        }
        
    } catch (error) {
        console.error('\n‚ùå Erro no teste do Purchase:');
        console.error(error.message);
    }
    
    console.log('================================\n');
}

// Fun√ß√£o para testar configura√ß√£o
function testConfiguration() {
    console.log('üß™ === TESTE: CONFIGURA√á√ÉO ===');
    
    const fb = new FacebookIntegration();
    const config = fb.validateConfig();
    
    console.log('üìã Valida√ß√£o da configura√ß√£o:');
    
    if (config.valid) {
        console.log('‚úÖ Configura√ß√£o v√°lida');
        console.log(`üì± Pixel ID: ${fb.pixelId ? 'Configurado' : 'N√£o configurado'}`);
        console.log(`üîë Access Token: ${fb.accessToken ? 'Configurado' : 'N√£o configurado'}`);
    } else {
        console.log('‚ùå Configura√ß√£o inv√°lida:');
        config.errors.forEach(error => {
            console.log(`   ‚Ä¢ ${error}`);
        });
    }
    
    console.log('=============================\n');
}

// Executar todos os testes
async function runAllTests() {
    console.log('üß™ === INICIANDO TESTES DAS CORRE√á√ïES ===\n');
    
    try {
        // 1. Testar configura√ß√£o
        testConfiguration();
        
        // 2. Testar formata√ß√£o FBC
        testFbcFormatting();
        
        // 3. Testar valida√ß√£o do token
        await testTokenValidation();
        
        // 4. Testar evento Purchase (apenas se token estiver configurado)
        if (process.env.FACEBOOK_ACCESS_TOKEN && process.env.FACEBOOK_PIXEL_ID) {
            await testPurchaseEvent();
        } else {
            console.log('‚ö†Ô∏è Pulando teste do Purchase - Token ou Pixel ID n√£o configurados\n');
        }
        
        console.log('üéâ === TESTES CONCLU√çDOS ===');
        console.log('\nüìã Resumo das corre√ß√µes implementadas:');
        console.log('‚úÖ 1. FBC agora usa timestamp em segundos (Unix time)');
        console.log('‚úÖ 2. Valida√ß√£o robusta do token com mensagens claras');
        console.log('‚úÖ 3. Logs detalhados para eventos Purchase');
        console.log('‚úÖ 4. Nova fun√ß√£o sendPurchaseEvent otimizada');
        console.log('‚úÖ 5. Verifica√ß√£o de System User Token do Business Manager');
        
    } catch (error) {
        console.error('‚ùå Erro durante os testes:', error.message);
    }
}

// Executar testes se arquivo for chamado diretamente
if (require.main === module) {
    runAllTests();
}

module.exports = {
    testFbcFormatting,
    testTokenValidation,
    testPurchaseEvent,
    testConfiguration,
    runAllTests
};